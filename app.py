import streamlit as st
import base64
import os
import random
import time
from streamlit.components.v1 import html

# ---------------- C·∫•u h√¨nh ----------------
st.set_page_config(page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1", layout="wide")

VIDEO_INTRO = "airplane.mp4"
PC_BACKGROUND = "cabbase.jpg"
MOBILE_BACKGROUND = "mobile.jpg"
MUSIC_FILES = [
    "background.mp3",
    "background2.mp3",
    "background3.mp3",
    "background4.mp3",
    "background5.mp3"
]

# **QUAN TR·ªåNG:** T·ª± ƒë·ªông chuy·ªÉn qua trang ch√≠nh sau 8 gi√¢y n·∫øu intro ch∆∞a ho√†n th√†nh
INTRO_DURATION_SEC = 7.5

if "intro_complete" not in st.session_state:
    st.session_state["intro_complete"] = False
if "intro_start_time" not in st.session_state:
    st.session_state["intro_start_time"] = time.time()


# ---------------- CSS ·∫©n header Streamlit ----------------
def hide_streamlit_ui():
    """·∫®n c√°c th√†nh ph·∫ßn giao di·ªán m·∫∑c ƒë·ªãnh c·ªßa Streamlit."""
    st.markdown("""
    <style>
    /* ·∫®n UI ch√≠nh c·ªßa Streamlit */
    [data-testid="stDecoration"],
    header, footer, [data-testid="stToolbar"],
    iframe, svg, [title*="keyboard"], [tabindex="0"][aria-live] {
        display: none !important;
        visibility: hidden !important;
    }
    /* ƒê·∫£m b·∫£o n·ªôi dung Streamlit b·ªã ·∫©n ho√†n to√†n khi intro ƒëang ch·∫°y */
    .stApp > div:nth-child(1) > div:nth-child(1) {
        visibility: hidden;
    }
    /* Fix cho l·ªói m√†n h√¨nh ƒëen: ƒê·∫∑t n·ªÅn trang lu√¥n l√† m√†u ƒëen khi ·ªü Intro */
    .stApp {
        background-color: black !important;
    }
    </style>
    """, unsafe_allow_html=True)


# ---------------- CSS n·ªÅn trang ch√≠nh ----------------
def apply_main_css():
    """√Åp d·ª•ng CSS n·ªÅn trang ch√≠nh."""
    st.markdown(f"""
    <style>
    .stApp {{
        background-image: url("{PC_BACKGROUND}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        transition: background 1s ease-in-out;
        background-color: transparent !important; /* ƒê·∫£m b·∫£o h√¨nh n·ªÅn hi·ªÉn th·ªã */
    }}
    @media only screen and (max-width: 768px) {{
        .stApp {{
            background-image: url("{MOBILE_BACKGROUND}");
        }}
    }}
    h1 {{
        font-family: 'Times New Roman', serif;
        color: #4E342E;
        text-shadow: 2px 2px 4px #FFF8DC;
    }}
    /* T·∫Øt ·∫©n Streamlit UI khi ·ªü trang ch√≠nh */
    .stApp > div:nth-child(1) > div:nth-child(1) {{
        visibility: visible !important;
    }}
    </style>
    """, unsafe_allow_html=True)


# ---------------- M√†n h√¨nh Intro (T·ªëi ∆∞u l·∫ßn cu·ªëi) ----------------
def intro_screen():
    """Hi·ªÉn th·ªã video intro v√† t·ª± ƒë·ªông chuy·ªÉn trang sau khi video k·∫øt th√∫c."""
    
    hide_streamlit_ui() 

    if not os.path.exists(VIDEO_INTRO):
        st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file airplane.mp4")
        st.session_state["intro_complete"] = True
        st.rerun()
        return

    # **C∆† CH·∫æ THO√ÅT KH·ªéI M√ÄN H√åNH ƒêEN (PYTHON FALLBACK)**
    # N·∫øu refresh v√† ƒë√£ ·ªü tr·∫°ng th√°i intro qu√° 8.5 gi√¢y, t·ª± ƒë·ªông chuy·ªÉn trang
    if time.time() - st.session_state["intro_start_time"] > INTRO_DURATION_SEC + 1:
        st.session_state["intro_complete"] = True
        st.rerun()
        return

    # Encode video base64
    with open(VIDEO_INTRO, "rb") as f:
        video_b64 = base64.b64encode(f.read()).decode()

    # HTML content
    intro_html_content = f"""
    <style>
    /* CSS nh√∫ng ƒë·ªÉ ƒë·∫£m b·∫£o video lu√¥n ƒë∆∞·ª£c hi·ªÉn th·ªã */
    html, body {{
        margin: 0; padding: 0;
        width: 100%; height: 100%;
        overflow: hidden;
        background-color: black;
    }}
    video {{
        position: fixed;
        top: 0; left: 0;
        width: 100vw;
        height: 100vh;
        object-fit: cover;
        z-index: -1;
    }}
    #intro-text {{
        position: fixed;
        bottom: 10%;
        left: 50%;
        transform: translateX(-50%);
        font-size: clamp(1em, 5vw, 1.8em);
        color: white;
        font-family: 'Times New Roman', serif;
        text-shadow: 2px 2px 8px black;
        animation: fadeInOut 6s forwards;
        z-index: 10;
    }}
    @keyframes fadeInOut {{
        0% {{ opacity: 0; }}
        15% {{ opacity: 1; }}
        85% {{ opacity: 1; }}
        100% {{ opacity: 0; }}
    }}
    #fadeout {{
        position: fixed;
        top: 0; left: 0;
        width: 100vw; height: 100vh;
        background: black;
        opacity: 0;
        transition: opacity 1s ease-in-out;
        z-index: 20;
    }}
    </style>

    <video id="introVideo" autoplay muted playsinline preload="auto">
        <source src="data:video/mp4;base64,{video_b64}" type="video/mp4">
    </video>

    <div id="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
    <div id="fadeout"></div>

    <script>
    const v = document.getElementById('introVideo');
    const fadeout = document.getElementById('fadeout');
    
    // K√≠ch ho·∫°t video (c·∫ßn cho mobile)
    v.play().catch(() => {{
        document.body.addEventListener('click', () => v.play(), {{once:true}});
    }});

    // **Thay v√¨ reload, ta s·∫Ω s·ª≠ d·ª•ng postMessage ƒë·ªÉ k√≠ch ho·∫°t Python**
    const totalDuration = {INTRO_DURATION_SEC} * 1000; 

    setTimeout(() => {{
        fadeout.style.opacity = 1;
        setTimeout(() => {{
            // **Th√¥ng b√°o cho Streamlit qua parent window**
            window.parent.postMessage({{type: 'intro_done'}}, '*');
            
            // **Th√™m m·ªôt fallback nh·∫π: Chuy·ªÉn h∆∞·ªõng sau khi post message**
            setTimeout(() => {{
                // √âp reload n·∫øu Streamlit kh√¥ng ph·∫£n h·ªìi postMessage
                window.parent.location.reload(); 
            }}, 500); 
        }}, 1000); // 1s cho hi·ªáu ·ª©ng fade
    }}, totalDuration - 1000); 
    </script>
    """
    
    # Hi·ªÉn th·ªã component HTML t√πy ch·ªânh
    html(intro_html_content, height=1, width=1)
    
    # **C∆° ch·∫ø nghe PostMessage t·ª´ JavaScript (kh√¥ng √°p d·ª•ng trong Streamlit)**
    # V√¨ Streamlit kh√¥ng c√≥ API ƒë∆°n gi·∫£n ƒë·ªÉ l·∫Øng nghe postMessage, 
    # ta v·∫´n ph·∫£i d·ª±a v√†o timeout (Python Fallback) ho·∫∑c th·ªß thu·∫≠t Form/Button.
    
    # ·ªû ƒë√¢y, ta ch·ªâ c·∫ßn d·ª±a v√†o Python Fallback Timeout v√† JS reload nh·∫π.
    st.markdown("</div>", unsafe_allow_html=True) # K·∫øt th√∫c div ·∫©n (n·∫øu c√≥)
    
    # **Th√™m n√∫t ·∫©n c√≥ th·ªÉ click th·ªß c√¥ng**
    # N√∫t n√†y KH√îNG ƒë∆∞·ª£c ·∫©n b·∫±ng CSS, n√≥ s·∫Ω b·ªã ·∫©n b·ªüi 'visibility: hidden' chung.
    # Nh∆∞ng n·∫øu b·∫°n b·ªã k·∫πt m√†n h√¨nh ƒëen, b·∫°n c√≥ th·ªÉ c·ªë g·∫Øng click v√†o khu v·ª±c n√†y.
    
    if st.button("B·ªè qua Intro", key="skip_intro"):
        st.session_state["intro_complete"] = True
        st.rerun()


# ---------------- Trang ch√≠nh ----------------
def main_page():
    """Hi·ªÉn th·ªã trang ch√≠nh."""
    
    apply_main_css()
    # Reset th·ªùi gian b·∫Øt ƒë·∫ßu khi v√†o trang ch√≠nh
    if "intro_start_time" in st.session_state:
         del st.session_state["intro_start_time"] 

    # Nh·∫°c n·ªÅn
    available = [m for m in MUSIC_FILES if os.path.exists(m)]
    if available:
        track = random.choice(available)
        with st.sidebar:
            st.subheader("üé∂ Nh·∫°c n·ªÅn")
            st.audio(track, format="audio/mp3", loop=True)
            st.caption(f"ƒêang ph√°t: **{os.path.basename(track)}**")

    # Ti√™u ƒë·ªÅ
    st.markdown("""
    <h1 style='text-align:center; font-size:3.2em; margin-top:50px;'>
        T·ªî B·∫¢O D∆Ø·ª†NG S·ªê 1
    </h1>
    """, unsafe_allow_html=True)
    st.markdown("<div style='height:70vh'></div>", unsafe_allow_html=True)


# ---------------- Logic ch√≠nh ----------------
if st.session_state["intro_complete"]:
    main_page()
else:
    intro_screen()
