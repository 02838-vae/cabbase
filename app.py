import streamlit as st
import base64
import os
import random
# Kh√¥ng c·∫ßn import time n·ªØa

# ---------------- C·∫•u h√¨nh ----------------
st.set_page_config(page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1", layout="wide")

VIDEO_INTRO = "airplane.mp4"
PC_BACKGROUND = "cabbase.jpg"
MOBILE_BACKGROUND = "mobile.jpg"
MUSIC_FILES = [
    "background.mp3",
    "background2.mp3",
    "background3.mp3",
    "background4.mp3",
    "background5.mp3"
]

if "intro_complete" not in st.session_state:
    st.session_state["intro_complete"] = False


# ---------------- CSS ·∫©n header Streamlit ----------------
def hide_streamlit_ui():
    """·∫®n c√°c th√†nh ph·∫ßn giao di·ªán m·∫∑c ƒë·ªãnh c·ªßa Streamlit."""
    st.markdown("""
    <style>
    /* ·∫®n Streamlit UI */
    [data-testid="stDecoration"],
    header, footer, [data-testid="stToolbar"],
    iframe, svg, [title*="keyboard"], [tabindex="0"][aria-live] {
        display: none !important;
        visibility: hidden !important;
    }
    /* ·∫®n c√°c widgets Streamlit trong khi intro */
    .stApp > div:nth-child(1) > div:nth-child(1) {
        visibility: hidden;
    }
    </style>
    """, unsafe_allow_html=True)


# ---------------- CSS n·ªÅn trang ch√≠nh ----------------
def apply_main_css():
    """√Åp d·ª•ng CSS n·ªÅn trang ch√≠nh."""
    st.markdown(f"""
    <style>
    .stApp {{
        background-image: url("{PC_BACKGROUND}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        transition: background 1s ease-in-out;
    }}
    @media only screen and (max-width: 768px) {{
        .stApp {{
            background-image: url("{MOBILE_BACKGROUND}");
        }}
    }}
    h1 {{
        font-family: 'Times New Roman', serif;
        color: #4E342E;
        text-shadow: 2px 2px 4px #FFF8DC;
    }}
    </style>
    """, unsafe_allow_html=True)


# ---------------- M√†n h√¨nh Intro (ƒê√É FIX L·ªñI M√ÄN H√åNH ƒêEN) ----------------
def intro_screen():
    """Hi·ªÉn th·ªã video intro v√† t·ª± ƒë·ªông chuy·ªÉn trang sau khi video k·∫øt th√∫c."""
    
    # ·∫®n UI Streamlit chung
    hide_streamlit_ui() 

    if not os.path.exists(VIDEO_INTRO):
        st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file airplane.mp4")
        st.session_state["intro_complete"] = True
        st.rerun()
        return

    # **S·ª≠ d·ª•ng Form ·∫©n ƒë·ªÉ k√≠ch ho·∫°t State Change:**
    # Form n√†y s·∫Ω t·∫°o ra m·ªôt n√∫t ·∫©n ƒë·ªÉ JavaScript click.
    with st.form("intro_form", clear_on_submit=False):
        # N√∫t submit ·∫©n. Key ph·∫£i kh√°c v·ªõi form ID.
        submit_clicked = st.form_submit_button("Done", key="intro_done_button_submit")
        
        # N·∫øu n√∫t ƒë∆∞·ª£c nh·∫•n, c·∫≠p nh·∫≠t session state v√† reruns
        if submit_clicked:
            st.session_state["intro_complete"] = True
            st.session_state["intro_done_button_submit"] = False # Reset tr·∫°ng th√°i
            st.rerun() # K√≠ch ho·∫°t chuy·ªÉn trang

        # Encode video base64
        with open(VIDEO_INTRO, "rb") as f:
            video_b64 = base64.b64encode(f.read()).decode()

        # T·∫°o HTML tr·ª±c ti·∫øp
        intro_html = f"""
        <style>
        /* CSS ƒë·ªÉ t·∫°o ra m√†n h√¨nh ƒëen bao ph·ªß */
        html, body {{
            margin: 0; padding: 0;
            width: 100%; height: 100%;
            overflow: hidden;
            background-color: black;
        }}
        /* ƒê·∫£m b·∫£o video n·∫±m c·ªë ƒë·ªãnh tr√™n m√†n h√¨nh */
        video {{
            position: fixed;
            top: 0; left: 0;
            width: 100vw;
            height: 100vh;
            object-fit: cover;
            z-index: -1;
        }}
        /* Text intro */
        #intro-text {{
            position: fixed;
            bottom: 10%;
            left: 50%;
            transform: translateX(-50%);
            font-size: clamp(1em, 5vw, 1.8em);
            color: white;
            font-family: 'Times New Roman', serif;
            text-shadow: 2px 2px 8px black;
            animation: fadeInOut 6s forwards;
            z-index: 10;
        }}
        @keyframes fadeInOut {{
            0% {{ opacity: 0; }}
            15% {{ opacity: 1; }}
            85% {{ opacity: 1; }}
            100% {{ opacity: 0; }}
        }}
        #fadeout {{
            position: fixed;
            top: 0; left: 0;
            width: 100vw; height: 100vh;
            background: black;
            opacity: 0;
            transition: opacity 1s ease-in-out;
            z-index: 20;
        }}
        /* **QUAN TR·ªåNG:** ·∫®n ho√†n to√†n form Streamlit ƒë·ªÉ ng∆∞·ªùi d√πng kh√¥ng th·∫•y */
        [data-testid="stForm"] {{
            display: none !important;
        }}
        /* ƒê·∫£m b·∫£o m·ªçi th·ª© kh√°c b·ªã ·∫©n */
        .stApp > div:nth-child(1) > div:nth-child(1) {{
            visibility: hidden;
        }}
        </style>

        <video id="introVideo" autoplay muted playsinline preload="auto">
            <source src="data:video/mp4;base64,{video_b64}" type="video/mp4">
        </video>

        <div id="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
        <div id="fadeout"></div>

        <script>
        const v = document.getElementById('introVideo');
        const fadeout = document.getElementById('fadeout');
        
        // **T√åM N√öT ·∫®N D·ª∞A TR√äN KEY STREAMLIT ƒê√É D√ôNG TRONG FORM**
        // T√¨m button "Done" (gi√° tr·ªã c·ªßa n√∫t ·∫©n) trong form
        const form = window.parent.document.querySelector('[data-testid="stForm"]');
        let doneButton = null;
        if (form) {{
            doneButton = form.querySelector('button');
        }}

        // N·∫øu autoplay b·ªã ch·∫∑n ‚Üí ph√°t khi user ch·∫°m (c·∫ßn thi·∫øt cho mobile)
        v.play().catch(() => {{
            document.body.addEventListener('click', () => v.play(), {{once:true}});
        }});

        // K√≠ch ho·∫°t fadeout v√† sau ƒë√≥ nh·∫•n n√∫t Streamlit
        // ƒê·∫∑t th·ªùi gian chuy·ªÉn ƒë·ªïi c·ªë ƒë·ªãnh (V√≠ d·ª•: 7.5 gi√¢y)
        const totalDuration = 7500; // 6.5s intro + 1s buffer

        setTimeout(() => {{
            fadeout.style.opacity = 1;
            setTimeout(() => {{
                // K√≠ch ho·∫°t Streamlit b·∫±ng c√°ch nh·∫•n n√∫t ·∫©n
                if (doneButton) {{
                    doneButton.click();
                }} else {{
                    console.error("N√∫t Streamlit ·∫©n kh√¥ng t√¨m th·∫•y.");
                    // ƒê·ªÉ tr√°nh b·ªã k·∫πt, c√≥ th·ªÉ y√™u c·∫ßu reload ho√†n to√†n
                    // window.location.reload(); 
                }}
            }}, 1000); // 1s cho hi·ªáu ·ª©ng fade
        }}, totalDuration - 1000); 
        </script>
        """

        # Hi·ªÉn th·ªã video tr·ª±c ti·∫øp
        st.markdown(intro_html, unsafe_allow_html=True)


# ---------------- Trang ch√≠nh ----------------
def main_page():
    """Hi·ªÉn th·ªã trang ch√≠nh."""
    
    # ·∫®n UI Streamlit chung
    hide_streamlit_ui()
    apply_main_css()

    # Nh·∫°c n·ªÅn
    available = [m for m in MUSIC_FILES if os.path.exists(m)]
    if available:
        track = random.choice(available)
        with st.sidebar:
            st.subheader("üé∂ Nh·∫°c n·ªÅn")
            st.audio(track, format="audio/mp3", loop=True)
            st.caption(f"ƒêang ph√°t: **{os.path.basename(track)}**")

    # Ti√™u ƒë·ªÅ
    st.markdown("""
    <h1 style='text-align:center; font-size:3.2em; margin-top:50px;'>
        T·ªî B·∫¢O D∆Ø·ª†NG S·ªê 1
    </h1>
    """, unsafe_allow_html=True)
    st.markdown("<div style='height:70vh'></div>", unsafe_allow_html=True)


# ---------------- Logic ch√≠nh ----------------
# Logic n√†y s·∫Ω ch·∫°y l·∫°i m·ªói khi trang ƒë∆∞·ª£c refresh
if st.session_state["intro_complete"]:
    main_page()
else:
    # N·∫øu intro_complete l√† False (m·ªõi load ho·∫∑c refresh), ch·∫°y intro
    intro_screen()
