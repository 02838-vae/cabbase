import streamlit as st
import random
import time
import os

# T√™n file ·∫£nh n·ªÅn ch√≠nh x√°c
PC_BACKGROUND = "cabbase.jpg" # ƒê√£ s·ª≠a l·∫°i theo y√™u c·∫ßu c·ªßa b·∫°n
MOBILE_BACKGROUND = "mobile.jpg"
VIDEO_INTRO = "airplane.mp4"

# --- C·∫•u h√¨nh Trang (Lu√¥n ƒë·∫∑t ·ªü ƒë·∫ßu) ---
st.set_page_config(layout="wide", page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1")

# --- Kh·ªüi t·∫°o Session State ---
if 'intro_complete' not in st.session_state:
    st.session_state['intro_complete'] = False
if 'intro_start_time' not in st.session_state:
    st.session_state['intro_start_time'] = time.time()

# --- CSS T√πy ch·ªânh (ƒê·ªãnh nghƒ©a Phong c√°ch Vintage v√† Hi·ªáu ·ª©ng) ---
def custom_css():
    """CSS cho Trang Ch√≠nh (k√®m Media Query cho n·ªÅn) v√† hi·ªáu ·ª©ng Intro"""
    
    vintage_css = f"""
    <style>
    /* CSS Chung cho n·ªÅn Trang Ch√≠nh */
    .stApp {{
        background-size: cover;
        background-attachment: fixed;
        background-position: center;
        transition: background-image 1s ease-in-out;
        min-height: 100vh;
    }}
    
    /* Thi·∫øt l·∫≠p ·∫£nh n·ªÅn m·∫∑c ƒë·ªãnh (PC) */
    .stApp.main-page-bg {{
        background-image: url("{PC_BACKGROUND}");
    }}
    
    /* Media Query cho Mobile */
    @media only screen and (max-width: 768px) {{
        .stApp.main-page-bg {{
            background-image: url("{MOBILE_BACKGROUND}"); /* ·∫¢nh n·ªÅn Mobile */
        }}
    }}

    /* Thi·∫øt l·∫≠p font ch·ªØ ki·ªÉu c·ªï ƒëi·ªÉn */
    h1, .stText, p, .stMarkdown, label {{
        font-family: 'Times New Roman', serif; 
        color: #4E342E; /* M√†u n√¢u ƒë·∫≠m */
    }}

    /* Hi·ªáu ·ª©ng ch·ªØ Intro */
    @keyframes fade_in_out {{
        0% {{ opacity: 0; }}
        10% {{ opacity: 1; }} 
        90% {{ opacity: 1; }}
        100% {{ opacity: 0; }} 
    }}
    
    #intro-text {{
        position: fixed; 
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 3em;
        color: white;
        text-shadow: 2px 2px 4px #000000;
        animation: fade_in_out 4s forwards; 
        z-index: 10000; 
        pointer-events: none;
    }}
    
    /* Hi·ªáu ·ª©ng chuy·ªÉn c·∫£nh video m·ªù d·∫ßn */
    @keyframes video_fade_out {{
        0% {{ opacity: 1; }}
        100% {{ opacity: 0; visibility: hidden; }}
    }}
    
    /* Container video */
    #video-container-fade {{
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 9999;
        opacity: 1;
        animation: video_fade_out 1s forwards; /* Hi·ªáu ·ª©ng m·ªù 1s */
        animation-delay: 4s; /* B·∫Øt ƒë·∫ßu m·ªù sau 4s (t·ªïng video 5s) */
        overflow: hidden;
        background-color: black;
    }}
    
    /* CƒÉn gi·ªØa video trong container */
    #video-container-fade video {{
        position: absolute;
        top: 50%;
        left: 50%;
        min-width: 100%; 
        min-height: 100%;
        width: auto;
        height: auto;
        transform: translate(-50%, -50%);
        object-fit: cover;
    }}
    
    /* ƒê·ªãnh d·∫°ng sidebar */
    [data-testid="stSidebarContent"] {{
        background-color: rgba(255, 255, 240, 0.9);
        padding: 15px;
        border-right: 2px solid #A1887F;
    }}
    </style>
    """
    st.markdown(vintage_css, unsafe_allow_html=True)

# --- ƒê·ªãnh nghƒ©a c√°c M√†n h√¨nh ---

def embed_intro_video_and_text():
    """Nh√∫ng video v√† ch·ªØ intro s·ª≠ d·ª•ng HTML/CSS tr·ª±c ti·∫øp"""
    custom_css()
    
    if not os.path.exists(VIDEO_INTRO):
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file video **{VIDEO_INTRO}**. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        time.sleep(2)
        st.session_state['intro_complete'] = True
        st.rerun()
        return

    # S·ª≠ d·ª•ng st.markdown ƒë·ªÉ nh√∫ng video HTML
    video_html = f"""
    <div id="video-container-fade">
        <video id="intro-video" autoplay muted playsinline loop
               style="object-fit: cover; width: 100%; height: 100%;"
               src="{VIDEO_INTRO}">
            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video.
        </video>
    </div>
    <div id="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
    """
    
    st.markdown(video_html, unsafe_allow_html=True)
    
    # --- K√çCH HO·∫†T CHUY·ªÇN TRANG SAU 5 GI√ÇY ---
    time_elapsed = time.time() - st.session_state['intro_start_time']
    
    if time_elapsed > 5.5: # 5 gi√¢y video + 0.5s buffer
        st.session_state['intro_complete'] = True
        st.rerun() 
    else:
        # T·∫°m d·ª´ng 1 gi√¢y v√† bu·ªôc rerender ƒë·ªÉ ƒë·∫øm ng∆∞·ª£c
        st.empty().write(f"ƒêang t·∫£i Intro... ({int(time_elapsed)}s)")
        time.sleep(1) 
        st.rerun()


def main_page():
    """Trang Ch√≠nh T·ªëi Gi·∫£n theo phong c√°ch Vintage"""
    custom_css()
    
    # G·∫Øn class n·ªÅn cho Trang Ch√≠nh
    st.markdown('<div class="stApp main-page-bg">', unsafe_allow_html=True)

    # 1. Thanh ph√°t nh·∫°c ng·∫´u nhi√™n (G√≥c tr√™n b√™n tr√°i)
    music_files = ["background.mp3", "background1.mp3", "background2.mp3", "background3.mp3", "background4.mp3", "background5.mp3"]
    random_track = random.choice(music_files)
    
    # S·ª≠ d·ª•ng st.sidebar ƒë·ªÉ ƒë·∫∑t thanh nh·∫°c g√≥c tr√™n b√™n tr√°i
    with st.sidebar:
        st.subheader("üé∂ Nh·∫°c N·ªÅn C·ªï ƒêi·ªÉn")
        st.audio(random_track, format="audio/mp3", start_time=0, loop=True) 
        st.caption(f"ƒêang ph√°t ng·∫´u nhi√™n: **{random_track}**")

    # 2. Ti√™u ƒë·ªÅ canh gi·ªØa
    st.markdown("<h1 style='text-align: center; font-size: 3.5em; text-shadow: 1px 1px 2px #FFF8DC;'>T·ªî B·∫¢O D∆Ø·ª†NG S·ªê 1</h1>", unsafe_allow_html=True)
    
    # 3. N·ªôi dung r·ªóng
    st.markdown('<div style="height: 50vh;"></div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

# --- Lu·ªìng ·ª®ng D·ª•ng Ch√≠nh ---
if st.session_state['intro_complete']:
    main_page()
else:
    embed_intro_video_and_text()
