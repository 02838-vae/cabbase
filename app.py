import streamlit as st
import os
import base64
import random
import time
import streamlit.components.v1 as components
from streamlit_js_eval import streamlit_js_eval # <-- Th∆∞ vi·ªán m·ªõi

# ================== C·∫§U H√åNH ==================
st.set_page_config(page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1", layout="wide")

VIDEO_PC = "airplane.mp4"
VIDEO_MOBILE = "mobile.mp4"
BG_PC = "cabbase.jpg"
BG_MOBILE = "mobile.jpg"
MUSIC_FILES = ["background.mp3", "background2.mp3", "background3.mp3", "background4.mp3", "background5.mp3"]

# ================== TR·∫†NG TH√ÅI ==================
# Kh·ªüi t·∫°o tr·∫°ng th√°i intro_done
if "intro_done" not in st.session_state:
    st.session_state.intro_done = False

# Kh·ªüi t·∫°o tr·∫°ng th√°i is_mobile v√† k√≠ch ho·∫°t x√°c ƒë·ªãnh thi·∫øt b·ªã
if "is_mobile" not in st.session_state:
    st.session_state.is_mobile = None
    # L·∫ßn ch·∫°y ƒë·∫ßu ti√™n: Y√™u c·∫ßu JS x√°c ƒë·ªãnh thi·∫øt b·ªã
    is_mobile_js = streamlit_js_eval(js_expressions='(/Mobi|Android|iPhone|iPad/i.test(navigator.userAgent))', key='mobile_detector')
    
    # N·∫øu c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ JS, c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† rerun
    if is_mobile_js is not None:
        st.session_state.is_mobile = is_mobile_js
        st.rerun()
    else:
        # Ch·ªù JS ch·∫°y l·∫ßn ƒë·∫ßu (M·∫∑c ƒë·ªãnh PC n·∫øu kh√¥ng c√≥ ph·∫£n h·ªìi)
        st.session_state.is_mobile = False
        st.rerun() # Rerun ƒë·ªÉ v√†o lu·ªìng ch√≠nh sau khi g√°n m·∫∑c ƒë·ªãnh


# ================== ·∫®N HEADER STREAMLIT ==================
def hide_streamlit_ui():
    st.markdown("""
    <style>
    [data-testid="stToolbar"],
    header, footer, iframe[title*="keyboard"], [tabindex="0"][aria-live] {
        display: none !important;
        visibility: hidden !important;
    }
    </style>
    """, unsafe_allow_html=True)


# ================== M√ÄN H√åNH INTRO S·ª¨ D·ª§NG st.video ==================
def intro_screen(is_mobile=False):
    hide_streamlit_ui()
    
    # S·ª≠ d·ª•ng logic ch·ªçn video ƒë∆°n gi·∫£n, KH√îNG D√ôNG BASE64
    video_path = VIDEO_MOBILE if is_mobile else VIDEO_PC
    
    if not os.path.exists(video_path):
        st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video: {video_path}")
        st.session_state.intro_done = True
        st.rerun()
        return

    # ·∫®n t·∫•t c·∫£ n·ªôi dung tr·ª´ video
    st.markdown("""
    <style>
    .stApp { overflow: hidden; background-color: black; }
    </style>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã video b·∫±ng st.video
    st.video(video_path, format='video/mp4', start_time=0)
    
    # S·ª≠ d·ª•ng HTML/CSS ƒë·ªÉ hi·ªÉn th·ªã text v√† cƒÉn video full m√†n h√¨nh
    # L∆ØU √ù: st.video kh√≥ cƒÉn full m√†n h√¨nh nh∆∞ components.html
    # Ch√∫ng ta ph·∫£i d√πng c√°ch CSS bao b·ªçc th·ªß c√¥ng h∆°n.
    intro_css = f"""
    <style>
        /* CSS cƒÉn gi·ªØa/full m√†n h√¨nh cho video (ph·ª©c t·∫°p trong Streamlit) */
        /* ƒê√¢y ch·ªâ l√† v√≠ d·ª• ƒë·ªÉ ƒë·∫£m b·∫£o video ƒë∆∞·ª£c hi·ªÉn th·ªã */
        #intro-text {{
            position: fixed;
            bottom: 18%;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            font-size: clamp(1em, 4vw, 2em);
            color: white;
            font-family: 'Playfair Display', serif;
            text-shadow: 2px 2px 6px rgba(0,0,0,0.8);
            animation: fadeInOut 6s ease-in-out forwards;
        }}
        @keyframes fadeInOut {{
            0% {{ opacity: 0; transform: translate(-50%, 20px); }}
            20% {{ opacity: 1; transform: translate(-50%, 0); }}
            80% {{ opacity: 1; transform: translate(-50%, 0); }}
            100% {{ opacity: 0; transform: translate(-50%, -10px); }}
        }}
    </style>
    <div id="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
    """
    st.markdown(intro_css, unsafe_allow_html=True)

    # ƒê·ª£i cho video k·∫øt th√∫c (Gi·∫£ ƒë·ªãnh video d√†i 9 gi√¢y)
    time.sleep(9)
    st.session_state.intro_done = True
    st.rerun()


# ================== TRANG CH√çNH (Gi·ªØ nguy√™n) ==================
def main_page(is_mobile=False):
    hide_streamlit_ui()
    bg = BG_MOBILE if is_mobile else BG_PC
    
    # ƒê·ªçc v√† m√£ h√≥a ·∫£nh n·ªÅn th√†nh Base64
    try:
        with open(bg, "rb") as f:
            bg_b64 = base64.b64encode(f.read()).decode()
    except FileNotFoundError:
        st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh n·ªÅn: {bg}")
        bg_b64 = "" # Fallback

    st.markdown(f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&display=swap');
    .stApp {{
        background-image: url("data:image/jpeg;base64,{bg_b64}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        animation: fadeInBg 1s ease-in-out forwards;
    }}
    /* ... (CSS c√≤n l·∫°i) ... */
    h1 {{
        text-align: center;
        margin-top: 60px;
        color: #2E1C14;
        text-shadow: 2px 2px 6px #FFF8DC;
        font-family: 'Playfair Display', serif;
    }}
    </style>
    """, unsafe_allow_html=True)

    # Nh·∫°c n·ªÅn
    available_music = [m for m in MUSIC_FILES if os.path.exists(m)]
    if available_music:
        chosen = random.choice(available_music)
        with st.sidebar:
            st.subheader("üéµ Nh·∫°c n·ªÅn")
            st.audio(chosen)
            st.caption(f"ƒêang ph√°t: **{os.path.basename(chosen)}**")

    st.markdown("<h1>T·ªî B·∫¢O D∆Ø·ª†NG S·ªê 1</h1>", unsafe_allow_html=True)


# ================== LU·ªíNG CH√çNH ==================
hide_streamlit_ui()

# Ki·ªÉm tra n·∫øu is_mobile v·∫´n l√† None, n√≥ s·∫Ω t·ª± ƒë·ªông ch·∫°y l·∫°i nh·ªù logic ·ªü tr√™n
if st.session_state.is_mobile is None:
    # N·∫øu ƒë·∫øn ƒë√¢y, c√≥ nghƒ©a l√† ƒëang ·ªü l·∫ßn ch·∫°y ƒë·∫ßu ti√™n v√† ƒëang ch·ªù JS tr·∫£ l·ªùi
    st.info("ƒêang x√°c ƒë·ªãnh thi·∫øt b·ªã...")
elif not st.session_state.intro_done:
    # is_mobile ƒë√£ c√≥ gi√° tr·ªã (True/False)
    intro_screen(st.session_state.is_mobile)
else:
    # Intro ƒë√£ xong
    main_page(st.session_state.is_mobile)
