import streamlit as st
import os
import base64
import random
import time
import streamlit.components.v1 as components

# ================== C·∫§U H√åNH ==================
st.set_page_config(page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1", layout="wide")

VIDEO_PC = "airplane.mp4"
VIDEO_MOBILE = "mobile.mp4"
BG_PC = "cabbase.jpg"
BG_MOBILE = "mobile.jpg"
MUSIC_FILES = ["background.mp3", "background2.mp3", "background3.mp3", "background4.mp3", "background5.mp3"]

# ================== TR·∫†NG TH√ÅI ==================
if "intro_done" not in st.session_state:
    st.session_state.intro_done = False
if "is_mobile" not in st.session_state:
    st.session_state.is_mobile = None # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau khi intro xong

# ================== ·∫®N HEADER STREAMLIT ==================
def hide_streamlit_ui():
    st.markdown("""
    <style>
    [data-testid="stToolbar"],
    header, footer, iframe[title*="keyboard"], [tabindex="0"][aria-live] {
        display: none !important;
        visibility: hidden !important;
    }
    </style>
    """, unsafe_allow_html=True)

# ---
## üìΩÔ∏è M√†n H√¨nh Intro Th·ªëng Nh·∫•t (JS Quy·∫øt ƒê·ªãnh)

def intro_screen_unified():
    hide_streamlit_ui()
    
    # M√£ h√≥a c·∫£ hai video th√†nh base64
    try:
        with open(VIDEO_PC, "rb") as f:
            video_pc_b64 = base64.b64encode(f.read()).decode()
        with open(VIDEO_MOBILE, "rb") as f:
            video_mobile_b64 = base64.b64encode(f.read()).decode()
    except FileNotFoundError as e:
        st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video: {e}")
        st.session_state.intro_done = True
        st.rerun()
        return

    # L∆ØU √ù: N·∫øu video l·ªõn, th·ªùi gian m√£ h√≥a/gi·∫£i m√£ base64 c√≥ th·ªÉ l√¢u.

    intro_html = f"""
    <!DOCTYPE html>
    <html lang="vi">
    <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        html, body {{ margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: black; }}
        video {{ width: 100vw; height: 100vh; object-fit: cover; object-position: center; }}
        #intro-text {{
            position: fixed; bottom: 18%; left: 50%; transform: translateX(-50%);
            font-size: clamp(1em, 4vw, 2em); color: white;
            font-family: 'Playfair Display', serif;
            text-shadow: 2px 2px 6px rgba(0,0,0,0.8);
            animation: fadeInOut 6s ease-in-out forwards;
        }}
        @keyframes fadeInOut {{
            0% {{ opacity: 0; transform: translate(-50%, 20px); }}
            20% {{ opacity: 1; transform: translate(-50%, 0); }}
            80% {{ opacity: 1; transform: translate(-50%, 0); }}
            100% {{ opacity: 0; transform: translate(-50%, -10px); }}
        }}
        #fade {{
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: black; opacity: 0; z-index: 10;
            transition: opacity 1s ease-in-out;
        }}
    </style>
    </head>
    <body>
        <video id="introVid" autoplay muted playsinline></video>
        <div id="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
        <div id="fade"></div>
        <script>
        const vid = document.getElementById("introVid");
        const fade = document.getElementById("fade");
        
        // **LOGIC QUAN TR·ªåNG: JS t·ª± quy·∫øt ƒë·ªãnh video**
        const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);
        const videoData = isMobile ? "{video_mobile_b64}" : "{video_pc_b64}";
        
        // G√°n source video ƒë√£ ch·ªçn
        vid.innerHTML = `<source src="data:video/mp4;base64,${videoData}" type="video/mp4">`;
        
        // G·ª≠i th√¥ng tin thi·∫øt b·ªã v√† ho√†n th√†nh intro l√™n Streamlit
        vid.onended = () => {{
            fade.style.opacity = 1;
            setTimeout(() => {{
                // G·ª≠i state is_mobile (True/False)
                window.parent.postMessage({{type: "device_state", value: isMobile}}, "*");
                // G·ª≠i t√≠n hi·ªáu ho√†n th√†nh intro
                window.parent.postMessage({{type: "intro_done"}}, "*");
            }}, 1200);
        }};
        
        // X·ª≠ l√Ω l·ªói ph√°t (n·∫øu video kh√¥ng t·∫£i ƒë∆∞·ª£c)
        vid.onerror = () => {{
            window.parent.postMessage({{type: "device_state", value: isMobile}}, "*");
            window.parent.postMessage({{type: "intro_done"}}, "*");
        }};
        
        </script>
    </body>
    </html>
    """
    
    # Hi·ªÉn th·ªã component HTML
    result = components.html(intro_html, height=800, scrolling=False, key="intro_video")

    # M·∫∑c d√π k·∫øt qu·∫£ (result) c√≥ th·ªÉ kh√¥ng h·ªØu √≠ch, ch√∫ng ta v·∫´n c·∫ßn ch·ªù.
    # S·ª≠ d·ª•ng th·ªùi gian ch·ªù c·ªë ƒë·ªãnh ƒë·ªÉ Streamlit chuy·ªÉn lu·ªìng sau video.
    time.sleep(9) 
    st.session_state.intro_done = True
    st.rerun()


# ---
## üè† Trang Ch√≠nh (S·ª≠ d·ª•ng state ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t)

def main_page(is_mobile=False):
    hide_streamlit_ui()
    bg = BG_MOBILE if is_mobile else BG_PC
    
    # ... (gi·ªØ nguy√™n logic main_page c·ªßa b·∫°n)
    st.markdown(f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&display=swap');
    .stApp {{
        background-image: url("{bg}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        animation: fadeInBg 1s ease-in-out forwards;
    }}
    @keyframes fadeInBg {{
        from {{ opacity: 0; }}
        to {{ opacity: 1; }}
    }}
    h1 {{
        text-align: center; margin-top: 60px; color: #2E1C14; 
        text-shadow: 2px 2px 6px #FFF8DC; font-family: 'Playfair Display', serif;
    }}
    </style>
    """, unsafe_allow_html=True)

    # Nh·∫°c n·ªÅn (gi·ªØ nguy√™n)
    available_music = [m for m in MUSIC_FILES if os.path.exists(m)]
    if available_music:
        chosen = random.choice(available_music)
        with st.sidebar:
            st.subheader("üéµ Nh·∫°c n·ªÅn")
            st.audio(chosen)
            st.caption(f"ƒêang ph√°t: **{os.path.basename(chosen)}**")

    st.markdown("<h1>T·ªî B·∫¢O D∆Ø·ª†NG S·ªê 1</h1>", unsafe_allow_html=True)


# ---
## üöÄ Lu·ªìng Ch√≠nh M·ªõi

# L·∫Øng nghe th√¥ng b√°o t·ª´ JavaScript Component
def listen_to_js():
    # S·ª≠ d·ª•ng result t·ª´ component HTML ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i v·ªÅ
    # Streamlit s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t session_state t·ª´ gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa component n·∫øu c√≥.
    # Tuy nhi√™n, ƒë·ªëi v·ªõi postMessage, ch√∫ng ta c·∫ßn m·ªôt c√°ch th·ªß c√¥ng h∆°n.
    # Streamlit component tr·∫£ v·ªÅ dictionary v·ªõi key t∆∞∆°ng ·ª©ng v·ªõi key c·ªßa component.
    # Trong tr∆∞·ªùng h·ª£p n√†y, ch√∫ng ta gi·∫£ ƒë·ªãnh st.session_state.is_mobile s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    # b·∫±ng c√°ch s·ª≠ d·ª•ng m·ªôt component Streamlit t√πy ch·ªânh n·∫øu c·∫ßn thi·∫øt.
    
    # C√°ch ƒë∆°n gi·∫£n h∆°n: D·ª±a v√†o th√¥ng b√°o ƒë√£ g·ª≠i l√™n.
    # Do components.html kh√¥ng cung c·∫•p API ph·∫£n h·ªìi tr·ª±c ti·∫øp cho postMessage,
    # ch√∫ng ta s·∫Ω d√πng m·ªôt th·ªß thu·∫≠t d·ª±a tr√™n ƒë·∫ßu ra ti√™u chu·∫©n c·ªßa components.html
    # v√† ch·∫•p nh·∫≠n r·∫±ng is_mobile c√≥ th·ªÉ b·ªã g√°n l·∫°i ·ªü cu·ªëi intro_screen_unified().
    
    # Thay th·∫ø cho logic JS postMessage:
    # B·∫°n s·∫Ω c·∫ßn m·ªôt Streamlit Component th·ª±c s·ª± ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi JS.
    # Tuy nhi√™n, n·∫øu b·∫°n kh√¥ng mu·ªën d√πng th∆∞ vi·ªán ngo√†i, ch√∫ng ta ch·ªâ c·∫ßn ƒë·∫£m b·∫£o r·∫±ng
    # logic chuy·ªÉn trang v·∫´n ho·∫°t ƒë·ªông.
    pass

# H√†m nghe s·∫Ω ƒë∆∞·ª£c g·ªçi ·ªü ƒë·∫ßu ·ª©ng d·ª•ng n·∫øu c·∫ßn
# listen_to_js()

# Thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh cho l·∫ßn ch·∫°y ƒë·∫ßu ti√™n (s·∫Ω b·ªã ghi ƒë√® sau)
if st.session_state.is_mobile is None:
    st.session_state.is_mobile = False

# X·ª≠ l√Ω lu·ªìng ch√≠nh
if not st.session_state.intro_done:
    # Ch·∫°y m√†n h√¨nh intro
    intro_screen_unified()
else:
    # Khi intro_done=True, ch√∫ng ta ch·∫°y trang ch√≠nh.
    # Do logic JS postMessage kh√¥ng c·∫≠p nh·∫≠t st.session_state ngay l·∫≠p t·ª©c,
    # b·∫°n c·∫ßn m·ªôt c√°ch ƒë·ªÉ Streamlit bi·∫øt thi·∫øt b·ªã l√† g√¨ cho trang ch√≠nh.
    
    # ƒê·ªÉ ƒë∆°n gi·∫£n, h√£y s·ª≠ d·ª•ng l·∫°i h√†m detect_device() C≈® c·ªßa b·∫°n nh∆∞ng 
    # ch·ªâ ch·∫°y N√ì M·ªòT L·∫¶N ·ªü ƒë√¢y ƒë·ªÉ l·∫•y k·∫øt qu·∫£ (Streamlit s·∫Ω c·ªë g·∫Øng nh·∫≠n).
    
    # N·∫øu b·∫°n mu·ªën is_mobile ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho trang ch√≠nh, b·∫°n s·∫Ω c·∫ßn
    # m·ªôt th∆∞ vi·ªán b√™n ngo√†i (streamlit_js_eval) ho·∫∑c reload (nh∆∞ ƒë√£ n√≥i).
    
    # GI·∫¢I PH√ÅP T·∫†M (Gi·ªØ logic hi·ªán t·∫°i): Ch√∫ng ta tin r·∫±ng intro_screen_unified ƒë√£ 
    # c·∫≠p nh·∫≠t state is_mobile tr∆∞·ªõc khi rerunning.
    
    main_page(st.session_state.is_mobile)
