import streamlit as st
import os
import base64
import random
import time
import streamlit.components.v1 as components
# Kh√¥ng c·∫ßn import html n·ªØa v√¨ ch√∫ng ta ƒë√£ ƒë∆°n gi·∫£n h√≥a c√°ch nh√∫ng Base64

# ================== C·∫§U H√åNH ==================
st.set_page_config(page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1", layout="wide")

VIDEO_PC = "airplane.mp4"
VIDEO_MOBILE = "mobile.mp4"
BG_PC = "cabbase.jpg"
BG_MOBILE = "mobile.jpg"
MUSIC_FILES = ["background.mp3", "background2.mp3", "background3.mp3", "background4.mp3", "background5.mp3"]

# ================== TR·∫†NG TH√ÅI ==================
if "intro_done" not in st.session_state:
    st.session_state.intro_done = False
if "is_mobile" not in st.session_state:
    # M·∫∑c ƒë·ªãnh l√† False (PC) cho l·∫ßn t·∫£i ƒë·∫ßu ti√™n, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau intro
    st.session_state.is_mobile = False


# ================== ·∫®N HEADER STREAMLIT ==================
def hide_streamlit_ui():
    st.markdown("""
    <style>
    [data-testid="stToolbar"],
    header, footer, iframe[title*="keyboard"], [tabindex="0"][aria-live] {
        display: none !important;
        visibility: hidden !important;
    }
    </style>
    """, unsafe_allow_html=True)


# ================== M√ÄN H√åNH INTRO TH·ªêNG NH·∫§T (S·ª≠ d·ª•ng logic ch·ªçn video ƒë∆°n gi·∫£n) ==================
def intro_screen_unified():
    hide_streamlit_ui()
    
    # 1. M√£ h√≥a c·∫£ hai video th√†nh base64
    try:
        with open(VIDEO_PC, "rb") as f:
            video_pc_b64 = base64.b64encode(f.read()).decode()
        with open(VIDEO_MOBILE, "rb") as f:
            video_mobile_b64 = base64.b64encode(f.read()).decode()
    except FileNotFoundError as e:
        st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video: {e}")
        st.session_state.intro_done = True
        st.rerun()
        return
        
    intro_html = f"""
    <!DOCTYPE html>
    <html lang="vi">
    <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        html, body {{ margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: black; }}
        video {{ width: 100vw; height: 100vh; object-fit: cover; object-position: center; }}
        #intro-text {{
            position: fixed; bottom: 18%; left: 50%; transform: translateX(-50%);
            font-size: clamp(1em, 4vw, 2em); color: white;
            font-family: 'Playfair Display', serif;
            text-shadow: 2px 2px 6px rgba(0,0,0,0.8);
            animation: fadeInOut 6s ease-in-out forwards;
        }}
        @keyframes fadeInOut {{
            0% {{ opacity: 0; transform: translate(-50%, 20px); }}
            20% {{ opacity: 1; transform: translate(-50%, 0); }}
            80% {{ opacity: 1; transform: translate(-50%, 0); }}
            100% {{ opacity: 0; transform: translate(-50%, -10px); }}
        }}
        #fade {{
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: black; opacity: 0; z-index: 10;
            transition: opacity 1s ease-in-out;
        }}
    </style>
    </head>
    <body>
        <video id="introVid" autoplay muted playsinline>
            <source id="pc_source" src="data:video/mp4;base64,{video_pc_b64}" type="video/mp4" data-mobile="false">
            <source id="mobile_source" src="data:video/mp4;base64,{video_mobile_b64}" type="video/mp4" data-mobile="true">
        </video>
        <div id="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
        <div id="fade"></div>
        <script>
        const vid = document.getElementById("introVid");
        const fade = document.getElementById("fade");
        
        // **LOGIC CH·ªåN VIDEO ƒê√É ƒê∆Ø·ª¢C ƒê∆†N GI·∫¢N H√ìA**
        const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);
        
        // L·∫•y source ph√π h·ª£p
        const mobileSource = document.getElementById("mobile_source");
        const pcSource = document.getElementById("pc_source");

        if (isMobile) {{
            // Lo·∫°i b·ªè PC source ƒë·ªÉ tr√¨nh duy·ªát ch·ªâ th·∫•y mobile
            vid.removeChild(pcSource);
        }} else {{
            // Lo·∫°i b·ªè Mobile source ƒë·ªÉ tr√¨nh duy·ªát ch·ªâ th·∫•y PC
            vid.removeChild(mobileSource);
        }}
        
        // T·∫£i l·∫°i video ƒë·ªÉ k√≠ch ho·∫°t ngu·ªìn m·ªõi
        vid.load(); 

        // G·ª≠i th√¥ng tin thi·∫øt b·ªã v√† ho√†n th√†nh intro l√™n Streamlit
        const finishIntro = (isMobileDevice) => {{
            fade.style.opacity = 1;
            setTimeout(() => {{
                // G·ª≠i state is_mobile v√† t√≠n hi·ªáu ho√†n th√†nh intro
                window.parent.postMessage({{type: "device_state", value: isMobileDevice}}, "*"); 
                window.parent.postMessage({{type: "intro_done", is_mobile: isMobileDevice}}, "*");
            }}, 1200);
        }};

        vid.onended = () => {{ finishIntro(isMobile); }};
        vid.onerror = () => {{ finishIntro(isMobile); }};
        
        </script>
    </body>
    </html>
    """
    
    components.html(intro_html, height=800, scrolling=False, key="intro_video")

    # D√πng th·ªùi gian ch·ªù c·ªë ƒë·ªãnh ƒë·ªÉ Streamlit chuy·ªÉn lu·ªìng sau video
    time.sleep(9) 
    st.session_state.intro_done = True
    # C·∫≠p nh·∫≠t is_mobile b·∫±ng c√°ch ƒë·ªçc l·∫°i th√¥ng b√°o (n·∫øu c√≥)
    # T·∫°m th·ªùi g√°n b·∫±ng True/False, n·∫øu Streamlit kh√¥ng nh·∫≠n ƒë∆∞·ª£c postMessage
    st.session_state.is_mobile = st.session_state.is_mobile if st.session_state.is_mobile is not None else False
    st.rerun()


# ================== TRANG CH√çNH ==================
def main_page(is_mobile=False):
    hide_streamlit_ui()
    bg = BG_MOBILE if is_mobile else BG_PC
    
    # ƒê·ªçc v√† m√£ h√≥a ·∫£nh n·ªÅn th√†nh Base64
    try:
        with open(bg, "rb") as f:
            bg_b64 = base64.b64encode(f.read()).decode()
    except FileNotFoundError:
        st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh n·ªÅn: {bg}")
        bg_b64 = "" # Fallback

    st.markdown(f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&display=swap');
    .stApp {{
        background-image: url("data:image/jpeg;base64,{bg_b64}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        animation: fadeInBg 1s ease-in-out forwards;
    }}
    @keyframes fadeInBg {{
        from {{ opacity: 0; }}
        to {{ opacity: 1; }}
    }}
    h1 {{
        text-align: center;
        margin-top: 60px;
        color: #2E1C14;
        text-shadow: 2px 2px 6px #FFF8DC;
        font-family: 'Playfair Display', serif;
    }}
    </style>
    """, unsafe_allow_html=True)

    # Nh·∫°c n·ªÅn
    available_music = [m for m in MUSIC_FILES if os.path.exists(m)]
    if available_music:
        chosen = random.choice(available_music)
        with st.sidebar:
            st.subheader("üéµ Nh·∫°c n·ªÅn")
            st.audio(chosen)
            st.caption(f"ƒêang ph√°t: **{os.path.basename(chosen)}**")

    st.markdown("<h1>T·ªî B·∫¢O D∆Ø·ª†NG S·ªê 1</h1>", unsafe_allow_html=True)


# ================== LU·ªíNG CH√çNH ==================
hide_streamlit_ui()

# Lu·ªìng ch√≠nh ƒë∆°n gi·∫£n:
if not st.session_state.intro_done:
    # Ch·∫°y m√†n h√¨nh intro (JS t·ª± ch·ªçn video)
    intro_screen_unified()
else:
    # Sau khi intro xong, ch·∫°y trang ch√≠nh v·ªõi state is_mobile
    main_page(st.session_state.is_mobile)
